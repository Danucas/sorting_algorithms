#include "sort.h"
/**
 *swap - sort list using insertion algorithm
 *@list: the list to be sorted
 *@top: th current node
 */
listint_t *swap(listint_t **list, listint_t *top)
{
	listint_t *next = top->next, *prev = top->prev;

	if (prev)
	{
		prev->next = next;
	}
	if (next){
		next->prev = prev;
		top->next = next->next;
		next->next = top;
		if (next->next)
			next->next->prev = top;

	}
	top->prev = next;
	if (!prev)
		*list = next;
	(void) list;
	return (next);
}

/**
 *sort_back - sort list using insertion algorithm
 *@list: the list to be sorted
 */
int sort_back(listint_t **list, listint_t *top, int *flag)
{
	while (top)
	{
		if (top->prev)
		{
			if (top->n < top->prev->n)
			{
				*flag = 0;
				top = swap(list, top->prev);
				printf("swap\n%2d, %2d |\n", top->n, top->next->n);
			}
		}
		if (top)
			top = top->prev;
		else
			break;

	}
	return(*flag);
	(void) list;
}


/**
 *sort_fow - sort list using insertion algorithm
 *@list: the list to be sorted
 */
int sort_fow(listint_t **list, int flag)
{
	listint_t *top = *list, *back;
	printf("\n\nsorting forward\n");

	while (top)
	{
		if (top->next)
		{
			if (top->n > top->next->n)
			{
				flag = 0;
				top = swap(list, top);
				/*printf("swap\n%2d, %2d |\n", top->next->n, top->n);*/			}
		}
		else
		{
			back = top;
			break;
		}
		if (top)
			top = top->next;
		else
			break;
	}
	printf("\n\nsorting backward\n");
	flag = sort_back(list, back, &flag);
	return (flag);
}




/**
 *cocktail_sort_list - sort list using insertion algorithm
 *@list: the list to be sorted
 */
void cocktail_sort_list(listint_t **list)
{
	listint_t *top, *prev, *next;
	int flag = 0;

	if (!list || !(*list) || !(*list)->next)
		return;
	top = (*list);
	while (flag == 0)
	{
		flag = 1;
		flag = sort_fow(list, flag);
	}
	printf("\n");
	(void) prev;
	(void) next;
	(void) top;
}
